<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="Business Services for EAI"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="EAI Business Services"
	   UI_FREEZE="N"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSJavaBusinessService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="EAI JSON Converter"
		   OBJECT_LANGUAGE_LOCKED="HEB"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="12/06/2018 07:27:53"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N">
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Create Siebel archive file with IO created on base SiebelMessage. It file may be imported by SiebelTools"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateIO">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Field External Name of IO"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="External Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="New IO Name"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Integration Object Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="List of enabled projects"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Project Name"
				   OPTIONAL="N"
				   PICK_FIELD="Name"
				   PICKLIST="Repository PickList Project/Project"
				   STORAGE_TYPE="Property"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Name of file for saving sif. Default C:\&lt;Integration Object Name&gt;.sif"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Save As"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Hierarchi on base it generated IO"
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="JSONToPropSet"
			   UPDATED="12/06/2018 07:54:03"
			   UPDATED_BY="IGOR_V"
			   CREATED="12/06/2018 07:52:31"
			   CREATED_BY="IGOR_V">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="&lt;Value&gt;"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="PropSetToJSON">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="&lt;Value&gt;"
				   OPTIONAL="N"
				   STORAGE_TYPE="Value"
				   TYPE="Input">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddFields(psIC:PropertySet, psObj:PropertySet)
{
	var thisFunctionName = &quot;AddFields&quot;;
	var property;
	var psField:PropertySet = TheApplication().NewPropertySet();
	
	psField.SetType(&quot;INTEGRATION_COMPONENT_FIELD&quot;);
	psField.SetProperty(&quot;FIELD_TYPE&quot;, &quot;Data&quot;);
	psField.SetProperty(&quot;INACTIVE&quot;, &quot;N&quot;);
	psField.SetProperty(&quot;ReplaceblePrefixXML_STYLE&quot;, &quot;Attribute&quot;);
	psField.SetProperty(&quot;EXTERNAL_REQUIRED&quot;, &quot;N&quot;);

	property = psObj.GetFirstProperty();
	while (property != &quot;&quot;)
	{
		psField.SetProperty(&quot;EXTERNAL_NAME&quot;, property);
		psField.SetProperty(&quot;NAME&quot;, property);
psField.SetProperty(&quot;PHYSICAL_DATA_TYPE&quot;, &quot;DTYPE_TEXT&quot;);
		psField.SetProperty(&quot;ReplaceblePrefixXML_TAG&quot;, property);
		psIC.AddChild(psField.Copy())
		property = psObj.GetNextProperty();
	}
}"
			   SEQUENCE="1">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateIcName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateIcName(IO:PropertySet, baseName)
{
/*
in ps IO search child with property &quot;NAME&quot; = baseName
If not found - return baseName. If found, search all instanses with &quot;NAME&quot; = baseName_[any naumber].
If not found - return baseName_0, if found return baseName_[max founded + 1]
*/
	var thisFunctionName = &quot;CalculateIcName&quot;
	var nextIndex = 0;
	var re = new RegExp(&quot;^&quot; + baseName + &quot;($|_(\\d+)$)&quot;); // $|_(\\d+)$ - end of string or _ + digits + end of string. Brackets in (\\d+) - for get digits
	var name = &quot;&quot;;
	var num = 0;
	var numNew = -1;
	for (var j = 0; j &lt; IO.GetChildCount(); j++)
	{
		name = IO.GetChild(j).GetProperty(&quot;NAME&quot;)
		if (re.test(name))
		{
			num = name.match(re)[2]; // Get digits after &quot;_&quot; in found string and convert to number Number(undefined) = 0
			num = (num === undefined) ? -1 : Number(num);
			numNew = Math.max(numNew, num + 1);
		}
	}
	re = null;
	if (numNew == -1)
		return baseName;
	else
		return baseName + &quot;_&quot; + numNew;
}"
			   SEQUENCE="2"
			   UPDATED="12/18/2018 15:27:44"
			   UPDATED_BY="IGOR_V"
			   CREATED="12/17/2018 08:18:41"
			   CREATED_BY="IGOR_V">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateIO"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateIO(obj:PropertySet, ioName, ioExternalName, projectName, fileName)
{
	var thisFunctionName = &quot;CreateIO&quot;;
	var ips:PropertySet;
	var ops:PropertySet;

	var ps_REPOSITORY:PropertySet;
	var ps_PROJECT:PropertySet;
	var ps_IO:PropertySet;
	var resultXml = &quot;&quot;;
//var outputFilePointer = null;
	ps_REPOSITORY = TheApplication().NewPropertySet();
	ps_PROJECT = TheApplication().NewPropertySet();
	ps_IO = TheApplication().NewPropertySet();

	ps_REPOSITORY.AddChild(ps_PROJECT);
	ps_PROJECT.AddChild(ps_IO);

	ps_REPOSITORY.SetType(&quot;REPOSITORY&quot;);
	ps_REPOSITORY.SetProperty(&quot;NAME&quot;, &quot;Siebel Repository&quot;);
	ps_REPOSITORY.SetProperty(&quot;FIO_PLACEHOLDER_FIO&quot;, &quot;TRUE&quot;);
	
	ps_PROJECT.SetType(&quot;PROJECT&quot;);
	ps_PROJECT.SetProperty(&quot;NAME&quot;, projectName);
	ps_PROJECT.SetProperty(&quot;FIO_PLACEHOLDER_FIO&quot;, &quot;TRUE&quot;);
	//ps_REPOSITORY.AddChild(ps_PROJECT);
	
	ps_IO.SetType(&quot;INTEGRATION_OBJECT&quot;);
	ps_IO.SetProperty(&quot;BASE_OBJECT_TYPE&quot;, &quot;XML&quot;);
	ps_IO.SetProperty(&quot;EXTERNAL_NAME&quot;, ioExternalName);
	ps_IO.SetProperty(&quot;NAME&quot;, ioName);
	ps_IO.SetProperty(&quot;INACTIVE&quot;,&quot;N&quot;);
	//ps_PROJECT.AddChild(ps_IO);

	ips = TheApplication().NewPropertySet();
	ips.AddChild(obj);

	NewIntegrationComponent(ps_IO, ips, /*ExternalNameContext*/&quot;&quot;, /*parentIcName:*/&quot;&quot;);

	ips.Reset()
	ops = TheApplication().NewPropertySet();
	ips.AddChild(ps_REPOSITORY);
	ips.SetProperty(&quot;Tags on Separate Lines&quot;, &quot;false&quot;)
	ips.SetProperty(&quot;EscapeNames&quot;, &quot;false&quot;);
	TheApplication().GetService(&quot;XML Converter (Data in Child PropSet)&quot;).InvokeMethod(&quot;PropSetToXML&quot;, ips, ops);
	resultXml = ops.GetValue().replace(/\sReplaceblePrefixXML_/g, &quot; XML_&quot;).replace(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot;,&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;);
	if (fileName == &quot;&quot;) fileName = &quot;C:\\&quot; + ioName + &quot;.sif&quot;;
	ips.Reset();
	ips.SetProperty(&quot;FileName&quot;, fileName);
	ips.SetProperty(&quot;CharSetConversion&quot;, &quot;UTF-8&quot;);
	ips.SetProperty(&quot;IgnoreCharSetConvErrors&quot;, &quot;true&quot;)
	ips.SetValue(resultXml);
	TheApplication().GetService(&quot;EAI File Transport&quot;).InvokeMethod(&quot;Send&quot;, ips, ops);

	/*outputFilePointer = Clib.fopen(fileName, &quot;w&quot;);
	if (null == outputFilePointer)
		TheApplication().RaiseErrorText(&quot;File &quot; + fileName + &quot; is not open&quot;);
	Clib.fputs(resultXml, outputFilePointer);
	Clib.fclose(outputFilePointer);*/

	ps_REPOSITORY = ps_PROJECT = ps_IO = ips = ops = null;
	//outputFilePointer = null;
}"
			   SEQUENCE="3">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NewIntegrationComponent"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NewIntegrationComponent(psIo:PropertySet, psObj:PropertySet, path, parentIcName)
{
	var thisFunctionName = &quot;NewIntegrationComponent&quot;;
	var psIC: PropertySet;
	var isPresentAppropriateIC = false;
	var nameSuffix = 0;
	var i = 0, j = 0;
	var realName = &quot;&quot;;
	var adapterInfo = &quot;&quot;;
	psIC = TheApplication().NewPropertySet();
	for (i = 0; i &lt; psObj.GetChildCount(); i++)
	{
		adapterInfo = path + &quot;.&quot; + psObj.GetChild(i).GetType();
		//WriteToLog(thisFunctionName, i + &quot;. adapterInfo = &quot; + adapterInfo, true);
		for (j = 0; j &lt; psIo.GetChildCount(); j++)
		{
			//WriteToLog(thisFunctionName, &quot;j = &quot; + j + &quot;. Current IC: &quot; + psIo.GetChild(j).GetProperty(&quot;NAME&quot;) + &quot;, researched IC: &quot; + psObj.GetChild(i).GetType(), true);
			if (psIo.GetChild(j).GetProperty(&quot;NAME&quot;) == psObj.GetChild(i).GetType())
			//if (psIo.GetChild(i).GetProperty(&quot;ADAPTER_INFO&quot;) == adapterInfo)
			{
				if (psIo.GetChild(j).GetProperty(&quot;ADAPTER_INFO&quot;) == adapterInfo)
				{
					psIo.GetChild(j).SetProperty(&quot;CARDINALITY&quot;, &quot;One or More&quot;);
					isPresentAppropriateIC = true;
					break;
				}
				//else
				//	nameSuffix ++;
			}
		}
		
		//for (j = 0; j &lt; psIo.GetChildCount(); j++)
//WriteToLog(thisFunctionName, &quot;isPresentAppropriateIC = &quot; + isPresentAppropriateIC, false);
		if (!isPresentAppropriateIC)
		{
			realName = CalculateIcName(psIo, psObj.GetChild(i).GetType());

			psIC = TheApplication().NewPropertySet();
			psIo.AddChild(psIC);
			psIC.SetType(&quot;INTEGRATION_COMPONENT&quot;);
			psIC.SetProperty(&quot;ADAPTER_INFO&quot;, adapterInfo);
			psIC.SetProperty(&quot;CARDINALITY&quot;, &quot;One&quot;);
			psIC.SetProperty(&quot;EXTERNAL_NAME&quot;,realName);
			psIC.SetProperty(&quot;NAME&quot;, realName);
			psIC.SetProperty(&quot;ReplaceblePrefixXML_TAG&quot;, psObj.GetChild(i).GetType());
			psIC.SetProperty(&quot;INACTIVE&quot;,&quot;N&quot;);
			psIC.SetProperty(&quot;PARENT_INTEGRATION_COMPONENT&quot;, parentIcName);
//WriteToLog(thisFunctionName, &quot;realName = &quot; + realName, true);
			
			AddFields(psIC, psObj.GetChild(i));
			
			
			NewIntegrationComponent(psIo, psObj.GetChild(i), adapterInfo, realName);

		}
	}

	
}"
			   SEQUENCE="4">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_InvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_InvokeMethod (MethodName, Inputs, Outputs:PropertySet)
{
	/*var thisFunctionName = &quot;Service_InvokeMethod&quot;;
	switch( MethodName )
	{
		case &quot;JSONToPropSet&quot;:
		{
			//WriteToLog(thisFunctionName, &quot;Outputs.GetChild(0).GetType() = &apos;&quot; + Outputs.GetChild(0).GetType() + &quot;&apos;&quot;, true)
			if (Outputs.GetChild(0).GetType() == &quot;&quot;)
				Outputs.GetChild(0).SetType(&quot;SiebelMesage&quot;);
			//TheApplication().GetService(&quot;General Utility Service&quot;).InvokeMethod(&quot;PrintPropertySet&quot;, Outputs.GetChild(0), TheApplication().NewPropertySet());
			break;
		}
		default:
		{
			//TheApplication().GetService(&quot;General Utility Service&quot;).InvokeMethod(&quot;PrintPropertySet&quot;, Outputs.GetChild(0), TheApplication().NewPropertySet());
			break;
		}
	}*/

}"
			   SEQUENCE="6">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{
	return (ContinueOperation);
}"
			   SEQUENCE="7">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs:PropertySet, Outputs)
{
	/*var thisFunctionName = &quot;Service_PreInvokeMethod&quot;;

	//WriteToLog(thisFunctionName, &quot;MethodName = &quot; + MethodName, true);
 	return (ContinueOperation);*/
	if (MethodName == &quot;CreateIO&quot;)
		for(var i = 0; i &lt; Inputs.GetChildCount(); i++)
			if (Inputs.GetChild(i).GetType() == &quot;SiebelMessage&quot;)
			{
				Inputs.GetChild(i).SetType(Inputs.GetProperty(&quot;External Name&quot;));
				CreateIO(
					Inputs.GetChild(i),
					Inputs.GetProperty(&quot;Integration Object Name&quot;),
					Inputs.GetProperty(&quot;External Name&quot;),
					Inputs.GetProperty(&quot;Project Name&quot;),
					Inputs.GetProperty(&quot;Save As&quot;)
					);
				break;
			}

}"
			   SEQUENCE="8">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WriteToLog"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function WriteToLog(functionName, messageText, isEconomizeDb)
{
	/**/
}"
			   SEQUENCE="5">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_USER_PROP
			   INACTIVE="N"
			   NAME="@class"
			   VALUE="EAIJSONConverter">
			</BUSINESS_SERVICE_USER_PROP>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>
